blueprint:
  name: Battery Smart Charge
  description: >
    Smart control of a battery charger using Octopus Agile half-hourly prices.
    Automatically chooses cheap slots and handles SoC, price caps, and plunge events.
  domain: automation
  source_url: https://github.com/elyobelyob/home-assistant-battery-smart-charge

  input:
    charger_switch:
      name: Charger Switch
      description: Switch or smart plug that powers the charger
      selector:
        entity:
          domain: switch
  
    battery_soc:
      name: Battery SoC Sensor
      description: Sensor returning battery state of charge (%)
      selector:
        entity:
          domain: sensor
  
    target_soc:
      name: Target SoC (%)
      default: 80
      selector:
        number:
          min: 10
          max: 100
          step: 1
  
    target_tolerance:
      name: Target Tolerance (%)
      default: 3
      selector:
        number:
          min: 0
          max: 10
          step: 1
  
    critical_min_soc:
      name: Critical Minimum SoC (%)
      default: 20
      selector:
        number:
          min: 0
          max: 100
          step: 1
  
    price_sensor:
      name: Price Sensor
      description: Sensor providing Agile rate attributes (from BottlecapDave integration)
      selector:
        entity:
          domain: sensor
  
    price_attribute:
      name: Price Attribute
      default: rates
      selector:
        text: {}
  
    price_key:
      name: Price Key
      default: value_inc_vat
      selector:
        text: {}
  
    start_key:
      name: Start Time Key
      default: start
      selector:
        text: {}
  
    end_key:
      name: End Time Key
      default: end
      selector:
        text: {}
  
    price_cap_p_per_kwh:
      name: Price Cap (p/kWh)
      description: Stop charging if price goes above this cap (0 disables)
      default: 0
      selector:
        number:
          min: 0
          step: 0.1
  
    plunge_threshold_p_per_kwh:
      name: Plunge Threshold (p/kWh)
      description: Force ON when price is at or below this threshold
      default: 0
      selector:
        number:
          min: -10
          step: 0.1
  
  mode: restart
  max_exceeded: silent
  
trigger:
  - platform: state
    entity_id: !input price_sensor
  - platform: state
    entity_id: !input battery_soc
  # Optional periodic check
  - platform: time_pattern
    minutes: "/30"

variables:
  battery_soc_entity: !input battery_soc
  charger_switch_entity: !input charger_switch
  price_sensor_entity: !input price_sensor
  price_attribute_name: !input price_attribute
  price_key_name: !input price_key
  start_key_name: !input start_key
  end_key_name: !input end_key
  price_cap: !input price_cap_p_per_kwh
  plunge_threshold: !input plunge_threshold_p_per_kwh
  target_soc: !input target_soc
  target_tolerance: !input target_tolerance
  critical_min_soc: !input critical_min_soc

  soc: "{{ states(battery_soc_entity) | float(0) }}"

  current_price: >
    {% set data = state_attr(price_sensor_entity, price_attribute_name) %}
    {% if data %}
      {% set now_iso = now().isoformat() %}
      {% set entry = data
        | selectattr(start_key_name, '<=', now_iso)
        | selectattr(end_key_name, '>', now_iso)
        | list
        | first %}
      {% if entry %}
        {{ entry[price_key_name] | float(999) }}
      {% else %}
        {{ states(price_sensor_entity) | float(999) }}
      {% endif %}
    {% else %}
      {{ states(price_sensor_entity) | float(999) }}
    {% endif %}
  
action:
  - choose:
      # 1. Critical SoC — force ON immediately
      - conditions:
          - condition: template
            value_template: "{{ soc | float <= critical_min_soc | float }}"
        sequence:
          - service: switch.turn_on
            target:
              entity_id: "{{ charger_switch_entity }}"
          - stop: "Critical SoC — charging immediately"

      # 2. Plunge price — force ON
      - conditions:
          - condition: template
            value_template: "{{ current_price | float <= plunge_threshold | float }}"
        sequence:
          - service: switch.turn_on
            target:
              entity_id: "{{ charger_switch_entity }}"
          - stop: "Plunge condition met — FORCE ON"

      # 3. Above price cap — turn OFF
      - conditions:
          - condition: template
            value_template: "{{ price_cap | float > 0 and current_price | float > price_cap | float }}"
        sequence:
          - service: switch.turn_off
            target:
              entity_id: "{{ charger_switch_entity }}"
          - stop: "Price above cap — OFF"

      # 4. SoC below target — start charging
      - conditions:
          - condition: template
            value_template: "{{ soc | float < target_soc | float - target_tolerance | float }}"
        sequence:
          - service: switch.turn_on
            target:
              entity_id: "{{ charger_switch_entity }}"
          - stop: "Charging — below target SoC"

      # 5. SoC above target — stop charging
      - conditions:
          - condition: template
            value_template: "{{ soc | float > target_soc | float + target_tolerance | float }}"
        sequence:
          - service: switch.turn_off
            target:
              entity_id: "{{ charger_switch_entity }}"
          - stop: "Charging — above target SoC"

    default:
      - service: switch.turn_off
        target:
          entity_id: "{{ charger_switch_entity }}"
