blueprint:
  name: Battery Smart Charge
  description: >
    Smart control of a battery charger using Octopus Agile half-hourly prices.
    Automatically chooses cheap slots and handles SoC, price caps, and plunge events.
  domain: automation

input:
  charger_switch:
    name: Charger Switch
    description: Switch or smart plug that powers the charger
    selector:
      entity:
        domain: switch

  battery_soc:
    name: Battery SoC Sensor
    description: Sensor returning battery state of charge (%)
    selector:
      entity:
        domain: sensor

  target_soc:
    name: Target SoC (%)
    default: 80
    selector:
      number:
        min: 10
        max: 100
        step: 1

  target_tolerance:
    name: Target Tolerance (%)
    default: 3
    selector:
      number:
        min: 0
        max: 10
        step: 1

  critical_min_soc:
    name: Critical Minimum SoC (%)
    default: 20
    selector:
      number:
        min: 0
        max: 100
        step: 1

  price_sensor:
    name: Price Sensor
    description: Sensor providing Agile rate attributes (from BottlecapDave integration)
    selector:
      entity:
        domain: sensor

  price_attribute:
    name: Price Attribute
    default: rates
    selector:
      text: {}

  price_key:
    name: Price Key
    default: value_inc_vat
    selector:
      text: {}

  start_key:
    name: Start Time Key
    default: start
    selector:
      text: {}

  end_key:
    name: End Time Key
    default: end
    selector:
      text: {}

  price_cap_p_per_kwh:
    name: Price Cap (p/kWh)
    description: Stop charging if price goes above this cap (0 disables)
    default: 0
    selector:
      number:
        min: 0
        step: 0.1

  plunge_threshold_p_per_kwh:
    name: Plunge Threshold (p/kWh)
    description: Force ON when price is at or below this threshold
    default: 0
    selector:
      number:
        min: -10
        step: 0.1

mode: restart
max_exceeded: silent

trigger:
  - platform: state
    entity_id: !input price_sensor
  - platform: state
    entity_id: !input battery_soc

variables:
  soc: "{{ states(!input battery_soc) | float(0) }}"
  price_data: "{{ state_attr(!input price_sensor, !input price_attribute) }}"
  price_key: !input price_key
  start_key: !input start_key
  price_cap: !input price_cap_p_per_kwh
  plunge_threshold: !input plunge_threshold_p_per_kwh
  current_price: >
    {% set data = state_attr(!input price_sensor, !input price_attribute) %}
    {% if data %}
      {% set now_iso = now().isoformat() %}
      {% set latest = data | selectattr(start_key, '<=', now_iso) | list | last %}
      {% if latest %}
        {{ latest[price_key] | float(999) }}
      {% else %}
        {{ states(!input price_sensor) | float(999) }}
      {% endif %}
    {% else %}
      {{ states(!input price_sensor) | float(999) }}
    {% endif %}

action:
  - choose:
      # Critical SoC – force ON
      - conditions: "{{ soc <= !input critical_min_soc }}"
        sequence:
          - service: switch.turn_on
            target:
              entity_id: !input charger_switch
          - stop: "Critical SoC — charging immediately"

      # Plunge – force ON
      - conditions: "{{ current_price <= plunge_threshold }}"
        sequence:
          - service: switch.turn_on
            target:
              entity_id: !input charger_switch
          - stop: "Plunge condition met — FORCE ON"

      # Above price cap – OFF
      - conditions: "{{ current_price > price_cap and price_cap > 0 }}"
        sequence:
          - service: switch.turn_off
            target:
              entity_id: !input charger_switch
          - stop: "Price above cap — OFF"

      # Regular SoC management
      - conditions: "{{ soc < (!input target_soc - !input target_tolerance) }}"
        sequence:
          - service: switch.turn_on
            target:
              entity_id: !input charger_switch
          - stop: "Charging — below target SoC"

      - conditions: "{{ soc > (!input target_soc + !input target_tolerance) }}"
        sequence:
          - service: switch.turn_off
            target:
              entity_id: !input charger_switch
          - stop: "Charging — above target SoC"

    default:
      - service: switch.turn_off
        target:
          entity_id: !input charger_switch
