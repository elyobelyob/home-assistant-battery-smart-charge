blueprint:
  name: Battery Smart Charging (Agile + SoC + Plunge) — Lean
  description: >
    Smart on/off control for a battery charger using Octopus Agile prices (via BottlecapDave).
    No fixed deadline: looks ahead over a rolling horizon and picks the cheapest half-hour slots
    to reach your Target SoC. Splits across multiple windows when optimal.

    Special rules:
      • Plunge price → FORCE ON (even at/above Target SoC): BMS will refuse extra charge and the
        charger will simply power local loads.
      • Optional low-price fallback → can also turn on when at/above target (configurable).
      • Optional Saving Session → FORCE OFF in that window to protect payout.

    Optional filters: Greener Nights window and price cap. Europe/London time; DST handled by HA.
  domain: automation

  input:
    charger_switch:
      name: Charger switch
      description: "Smart plug or switch that powers your charger"
      selector:
        entity:
          domain: switch

    battery_soc:
      name: Battery SoC sensor (%)
      description: "Sensor returning 0–100 (e.g. SmartShunt/BMS)"
      selector:
        entity:
          domain: sensor

    battery_capacity_kwh:
      name: Battery capacity (kWh)
      description: "Example: 7.17 (Fogstar 560 Ah @ 12.8 V)"
      default: 5.0
      selector:
        number:
          min: 0.1
          max: 1000.0
          step: 0.01
          unit_of_measurement: kWh
          mode: box

    charger_power_w:
      name: Charger output power (W)
      description: "Real charging watts at your chosen setting (e.g., 600)"
      default: 600
      selector:
        number:
          min: 50
          max: 4000
          step: 10
          unit_of_measurement: W
          mode: box

    charge_efficiency:
      name: Charge efficiency (0–1)
      description: "Accounts for losses; 0.92 is a sensible default"
      default: 0.92
      selector:
        number:
          min: 0.6
          max: 1.0
          step: 0.01
          mode: slider

    target_soc:
      name: Target SoC (%)
      description: "Target battery state of charge in percent"
      default: 80
      selector:
        number:
          min: 1
          max: 100
          step: 1
          unit_of_measurement: "%"

    target_tolerance:
      name: Target tolerance (%)
      description: "Treat SoC within this band of target as close enough"
      default: 3
      selector:
        number:
          min: 0
          max: 10
          step: 1
          unit_of_measurement: "%"

    critical_min_soc:
      name: Critical minimum SoC (%)
      description: "Below this, charge immediately for safety (ignores price cap and windows)"
      default: 20
      selector:
        number:
          min: 0
          max: 95
          step: 1
          unit_of_measurement: "%"

    planning_horizon_hours:
      name: Look-ahead horizon (hours)
      description: "How far ahead to plan (24–72 typical)"
      default: 48
      selector:
        number:
          min: 12
          max: 168
          step: 1
          unit_of_measurement: h
          mode: slider

    price_sensor:
      name: BottlecapDave price sensor
      description: "Sensor whose attributes include upcoming half-hourly rates"
      selector:
        entity:
          domain: sensor

    price_attribute:
      name: Price list attribute name
      description: "Attribute that holds the list of upcoming rates (commonly 'rates')"
      default: rates
      selector:
        text: {}

    price_key:
      name: Price key within each item
      description: "Usually 'value_inc_vat' (p/kWh); accepts 'value' too"
      default: value_inc_vat
      selector:
        text: {}

    start_key:
      name: Slot start key
      description: "Key name for start datetime"
      default: start
      selector:
        text: {}

    end_key:
      name: Slot end key
      description: "Key name for end datetime"
      default: end
      selector:
        text: {}

    limit_to_offpeak:
      name: Limit to Greener Nights window
      description: "If on, only schedule within the time window below"
      default: false
      selector:
        boolean: {}

    offpeak_start_time:
      name: Off-peak start
      description: "Typical example: 23:30"
      default: "23:30:00"
      selector:
        time: {}

    offpeak_end_time:
      name: Off-peak end
      description: "Typical example: 05:30"
      default: "05:30:00"
      selector:
        time: {}

    price_cap_p_per_kwh:
      name: Price cap (p/kWh)
      description: "0 disables the cap"
      default: 0
      selector:
        number:
          min: 0
          max: 200
          step: 0.1
          unit_of_measurement: "p/kWh"
          mode: box

    plunge_threshold_p_per_kwh:
      name: Plunge threshold (p/kWh)
      description: "At/under this price → FORCE ON (even above target)"
      default: 0.0
      selector:
        number:
          min: -50
          max: 50
          step: 0.1
          unit_of_measurement: "p/kWh"
          mode: box

    plunge_ignores_windows:
      name: Plunge can override Greener Nights & price cap
      description: "If true, plunge ignores window and price cap limits"
      default: true
      selector:
        boolean: {}

    low_price_fallback_p_per_kwh:
      name: Low-price fallback (p/kWh)
      description: "0 disables. If no cheaper ahead and price ≤ this, turn on"
      default: 0.0
      selector:
        number:
          min: 0
          max: 50
          step: 0.1
          unit_of_measurement: "p/kWh"
          mode: box

    fallback_aggressive:
      name: "Fallback mode: aggressive"
      description: "If true, fallback ignores cheaper-ahead check"
      default: false
      selector:
        boolean: {}

    saving_session_helper:
      name: Saving Session active helper (optional)
      description: "Optional input_boolean that you toggle ON during a Saving Session window"
      default:
      selector:
        entity:
          domain: input_boolean
          multiple: false
          include_entities:
            - "*"

trigger:
  # Re-evaluate every 5 minutes (safety net)
  - platform: time_pattern
    minutes: "/5"

  # Re-run when the Agile price sensor updates
  - platform: state
    entity_id: !input price_sensor

  # Re-run whenever SoC sensor changes
  - platform: state
    entity_id: !input battery_soc
    for:
      seconds: 10  # short debounce to prevent flapping

  # Optional: re-run if saving session flag changes
  - platform: state
    entity_id: !input saving_session_helper

variables:
  charger_switch: !input charger_switch
  battery_soc: !input battery_soc
  battery_capacity_kwh: !input battery_capacity_kwh
  charger_power_w: !input charger_power_w
  charge_efficiency: !input charge_efficiency
  target_soc: !input target_soc
  target_tolerance: !input target_tolerance
  critical_min_soc: !input critical_min_soc
  planning_horizon_hours: !input planning_horizon_hours
  price_sensor: !input price_sensor
  price_attribute: !input price_attribute
  price_key: !input price_key
  start_key: !input start_key
  end_key: !input end_key
  limit_to_offpeak: !input limit_to_offpeak
  offpeak_start_time: !input offpeak_start_time
  offpeak_end_time: !input offpeak_end_time
  price_cap_p_per_kwh: !input price_cap_p_per_kwh
  plunge_threshold_p_per_kwh: !input plunge_threshold_p_per_kwh
  plunge_ignores_windows: !input plunge_ignores_windows
  low_price_fallback_p_per_kwh: !input low_price_fallback_p_per_kwh
  fallback_aggressive: !input fallback_aggressive
  saving_session_helper: !input saving_session_helper

condition: []

action:
  - variables:
      soc: "{{ states(battery_soc) | float(0) }}"
      price_data: "{{ state_attr(price_sensor, price_attribute) }}"
      now: "{{ now() }}"
      current_price: >
        {% set attr = state_attr(price_sensor, price_attribute) %}
        {% if attr and attr | length > 0 %}
          {% set latest = attr | selectattr(start_key, '<=', now.isoformat()) | list | last %}
          {% if latest %}
            {{ latest[price_key] | float(0) }}
          {% else %}
            999
          {% endif %}
        {% else %}
          999
        {% endif %}

  - choose:
      - conditions:
          - condition: template
            value_template: "{{ soc <= critical_min_soc }}"
        sequence:
          - service: switch.turn_on
            target:
              entity_id: "{{ charger_switch }}"
          - stop: "Critical SoC — charging immediately"

      - conditions:
          - condition: template
            value_template: "{{ current_price <= plunge_threshold_p_per_kwh }}"
        sequence:
          - service: switch.turn_on
            target:
              entity_id: "{{ charger_switch }}"
          - stop: "Plunge condition met — FORCE ON"

      - conditions:
          - condition: template
            value_template: >
              {{ states(saving_session_helper) == 'on' }}
        sequence:
          - service: switch.turn_off
            target:
              entity_id: "{{ charger_switch }}"
          - stop: "Saving Session active — FORCE OFF"

      - conditions:
          - condition: template
            value_template: >
              {{ current_price > price_cap_p_per_kwh and price_cap_p_per_kwh > 0 }}
        sequence:
          - service: switch.turn_off
            target:
              entity_id: "{{ charger_switch }}"
          - stop: "Price above cap — OFF"

      - conditions:
          - condition: template
            value_template: >
              {{ current_price <= low_price_fallback_p_per_kwh and low_price_fallback_p_per_kwh > 0 }}
        sequence:
          - service: switch.turn_on
            target:
              entity_id: "{{ charger_switch }}"
          - stop: "Low price fallback — ON"

  - choose:
      - conditions:
          - condition: template
            value_template: >
              {{ soc < target_soc - target_tolerance }}
        sequence:
          - service: switch.turn_on
            target:
              entity_id: "{{ charger_switch }}"
      - conditions:
          - condition: template
            value_template: >
              {{ soc > target_soc + target_tolerance }}
        sequence:
          - service: switch.turn_off
            target:
              entity_id: "{{ charger_switch }}"

mode: single
